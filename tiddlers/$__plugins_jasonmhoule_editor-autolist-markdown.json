{"tiddlers":{"$:/plugins/jasonmhoule/editor-autolist-markdown/EditorToolbar-autolist-indent":{"title":"$:/plugins/jasonmhoule/editor-autolist-markdown/EditorToolbar-autolist-indent","button-classes":"sq-text-editor-btn-hidden","caption":"","condition":"[<targetTiddler>type[text/x-markdown]]","created":"20200803213912954","description":"","icon":"$:/core/images/list-bullet","modified":"20210715143026077","shortcuts":"((autolist-markdown-indent))","tags":"$:/tags/EditorToolbar","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage\n\t$message=\"tm-edit-text-operation\"\n\t$param=\"autolist-markdown\"\n\tmode=\"indent\"\n/>\n"},"$:/plugins/jasonmhoule/editor-autolist-markdown/EditorToolbar-autolist-newline":{"title":"$:/plugins/jasonmhoule/editor-autolist-markdown/EditorToolbar-autolist-newline","button-classes":"sq-text-editor-btn-hidden","caption":"","condition":"[<targetTiddler>type[text/x-markdown]]","created":"20200803165453913","description":"","icon":"$:/core/images/list-bullet","modified":"20210715145455311","shortcuts":"((autolist-markdown-newline))","tags":"$:/tags/EditorToolbar","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage\n\t$message=\"tm-edit-text-operation\"\n\t$param=\"autolist-markdown\"\n\tmode=\"newline\"\n/>\n"},"$:/plugins/jasonmhoule/editor-autolist-markdown/EditorToolbar-autolist-pushgroupdown":{"title":"$:/plugins/jasonmhoule/editor-autolist-markdown/EditorToolbar-autolist-pushgroupdown","button-classes":"sq-text-editor-btn-hidden","caption":"","condition":"[<targetTiddler>type[text/x-markdown]]","created":"20210713141128951","description":"","icon":"$:/core/images/list-bullet","modified":"20210715144000705","shortcuts":"((autolist-markdown-pushgroupdown))","tags":"$:/tags/EditorToolbar","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage\n\t$message=\"tm-edit-text-operation\"\n\t$param=\"autolist-markdown\"\n\tmode=\"pushgroupdown\"\n/>\n"},"$:/plugins/jasonmhoule/editor-autolist-markdown/EditorToolbar-autolist-pushgroupup":{"title":"$:/plugins/jasonmhoule/editor-autolist-markdown/EditorToolbar-autolist-pushgroupup","button-classes":"sq-text-editor-btn-hidden","caption":"","condition":"[<targetTiddler>type[text/x-markdown]]","created":"20210713140706563","description":"","icon":"$:/core/images/list-bullet","modified":"20210715144014165","shortcuts":"((autolist-markdown-pushgroupup))","tags":"$:/tags/EditorToolbar","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage\n\t$message=\"tm-edit-text-operation\"\n\t$param=\"autolist-markdown\"\n\tmode=\"pushgroupup\"\n/>\n"},"$:/plugins/jasonmhoule/editor-autolist-markdown/EditorToolbar-autolist-unindent":{"title":"$:/plugins/jasonmhoule/editor-autolist-markdown/EditorToolbar-autolist-unindent","button-classes":"sq-text-editor-btn-hidden","caption":"","condition":"[<targetTiddler>type[text/x-markdown]]","created":"20200804122848593","description":"","icon":"$:/core/images/list-bullet","modified":"20210715144027982","shortcuts":"((autolist-markdown-unindent))","tags":"$:/tags/EditorToolbar","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage\n\t$message=\"tm-edit-text-operation\"\n\t$param=\"autolist-markdown\"\n\tmode=\"unindent\"\n/>\n"},"$:/plugins/jasonmhoule/editor-autolist-markdown/editor-operation-autolist":{"title":"$:/plugins/jasonmhoule/editor-autolist-markdown/editor-operation-autolist","text":"/*\\\ncreated: 20200803160356743\ntype: application/javascript\ntitle: $:/plugins/jasonmhoule/editor-autolist-markdown/editor-operation-autolist\ntags: \nmodified: 20210724192011820\nmodule-type: texteditoroperation\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.indent_line = function(line, mode, operation) {\n    var indentRegExp = /^((\\s\\s)*-\\s)(.*)$/;\n\tvar indentMatch = line.match(indentRegExp);\n\tif(indentMatch != null) {\n\t\t//check if the line has content\n\t\tvar content = (indentMatch[3].trim().length != 0) ? indentMatch[3].trim() : \"\";\n\t\tif(mode === \"indent\") {\t\t\t\t\n\t\t\t//indent a line\n            var newLine = \"  \" + indentMatch[1] + content;\n\t\t} else if(mode === \"unindent\") {\n\t\t\t//unindent a line\n\t\t\tvar newLine = indentMatch[1].substring(2,indentMatch[1].length) + content;\n        }\n    } else {\n        var newLine = line\n    }\n    return newLine\n}\n\nexports[\"autolist-markdown\"] = function(event,operation) {\n    \n    var vs = Object()\n    vs.lineStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\n    vs.lineEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selStart);\n\tvs.line = operation.text.substring(vs.lineStart,vs.lineEnd);\t\n\n    if(vs.lineStart == operation.selEnd) {\n      vs.linesEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\n    } else {\n      vs.linesEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd - 1); // avoids grabbing next line if selection includes end-of-line newline\n    }\n\tvs.lines = operation.text.substring(vs.lineStart,vs.linesEnd);\t\n    vs.linesContents = vs.lines.split(\"\\n\")\n    vs.lineslengths = []\n    vs.linesContents.forEach((element, index) => {\n        vs.lineslengths[index] = element.length\n    });\n\n\tvs.prevlineStart = $tw.utils.findPrecedingLineBreak(operation.text,vs.lineStart -1);\n\tvs.prevlineEnd = $tw.utils.findFollowingLineBreak(operation.text,vs.lineStart -1);\n    vs.prevline = operation.text.substring(vs.prevlineStart,vs.prevlineEnd);\n\tvs.nextlineStart = $tw.utils.findPrecedingLineBreak(operation.text,vs.linesEnd + 1);\n\tvs.nextlineEnd = $tw.utils.findFollowingLineBreak(operation.text,vs.linesEnd + 1);\n    vs.nextline = operation.text.substring(vs.nextlineStart,vs.nextlineEnd);\n\t\n\tvar listPrefixRegex = /^((\\s\\s)*-\\s).*/;\n\tvar match = vs.line.match(listPrefixRegex);\n\t\n\tvar mode = event.paramObject? event.paramObject.mode : undefined;\n\n\t//ensure we only handle lines starting with correct prefix\n\tif(match != null && match[1]) {\n\t\t// check if we are handling indent level\n\t\tif(mode === \"indent\" || mode === \"unindent\") {\n            operation.cutStart = vs.lineStart;\n            operation.cutEnd = vs.linesEnd;\n            vs.updatedLinesContents = [];\n            vs.linesContents.forEach((element, index) => {\n                vs.updatedLinesContents[index] = exports.indent_line(element, mode, operation)\n            });\n            if(mode === \"indent\") {\t\t\t\t\n                vs.selAdd = 2\n            } else if(mode === \"unindent\") {\n                vs.selAdd = -2\n            }\n            operation.replacement = vs.updatedLinesContents.join(\"\\n\");\n            vs.newLinesEnd = vs.lineStart + operation.replacement.length;\n            vs.newSelStart = Math.max(operation.selStart + vs.selAdd, vs.lineStart);\n            vs.newSelEnd = Math.max(vs.newLinesEnd - (vs.linesEnd - operation.selEnd), vs.lineStart);\n            operation.newSelStart = vs.newSelStart;\n            operation.newSelEnd = vs.newSelEnd;\n            //var myObj4 = { obj : \"vs\", var : vs };\n            //console.log(myObj4)\n            //var myObj5 = { obj : \"op\", var : operation };\n            //console.log(myObj5)\n\t\t} else if(mode == \"newline\") {\n\t\t\t//handle enter key, meaning new line\n\t\t\tvar trimmed = match[0].replace(/\\s*$/, '');\n\t\t\tvar prefixRegEx = /^((\\s\\s)*-)$/;\n\t\t\tvar trimmedMatch = trimmed.match(prefixRegEx);\n\t\t\tif(trimmedMatch != null) {\n\t\t\t\t// the line only contains prefix characters and optional whitespace\n\t\t\t\t//terminate the list\n\t\t\t\toperation.replacement = \"\\n\";\n\t\t\t\toperation.cutStart = vs.lineStart;\n\t\t\t\toperation.cutEnd = operation.selStart;\n\t\t\t\toperation.newSelStart = vs.lineStart + 1;\n\t\t\t\toperation.newSelEnd = vs.lineStart + 1;\n\t\t\t} else {\n\t\t\t\t// continue indent level on next line\n\t\t\t\tvar prefix = match[1];\n\t\t\t\tif(operation.selStart - vs.lineStart < prefix.length) {\n\t\t\t\t\toperation.selStart = vs.lineStart + prefix.length\n\t\t\t\t}\n\t\t\t\tif(operation.selEnd - vs.lineStart < prefix.length) {\n\t\t\t\t\toperation.selEnd = vs.lineStart + prefix.length\n\t\t\t\t}\n\t\t\t\toperation.replacement = \"\\n\" + prefix;\n\t\t\t\toperation.cutStart = operation.selStart;\n\t\t\t\toperation.cutEnd = operation.selEnd; //operation.selStart;\n\t\t\t\t\n\t\t\t\t//check if there is trailing whitespace on the line we are on\n\t\t\t\t// var lineEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selStart);\n\t\t\t\tvar trailingText = operation.text.substring(operation.selStart,vs.lineEnd);\n\t\t\t\tif(trailingText.trim().length == 0) {\n\t\t\t\t\toperation.cutEnd = vs.lineEnd;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toperation.newSelStart = operation.selStart + prefix.length + 1;\n\t\t\t\toperation.newSelEnd = operation.newSelStart;\n\t\t\t}\n\t\t} else if(mode == \"pushgroupup\" && vs.prevlineStart != vs.lineStart) {\n\t\t\t// grab the previous line and place it below the selection \n\t\t\toperation.replacement = vs.lines + \"\\n\" + vs.prevline;\n\t\t\toperation.cutStart = vs.prevlineStart;\n\t\t\toperation.cutEnd = vs.linesEnd;\n\t\t\toperation.newSelStart = vs.prevlineStart;\n\t\t\toperation.newSelEnd = vs.prevlineStart + vs.lines.length;\n        } else if(mode == \"pushgroupdown\" && vs.nextlineEnd != vs.linesEnd) {\n\t\t\t// grab the next line and place it above the selection\n\t\t\toperation.replacement = vs.nextline + \"\\n\" + vs.lines;\n\t\t\toperation.cutStart = vs.lineStart;\n\t\t\toperation.cutEnd = vs.nextlineEnd;\n\t\t\toperation.newSelStart = vs.lineStart + vs.nextline.length + 1;\n\t\t\toperation.newSelEnd = vs.lineStart + vs.nextline.length + 1 + vs.lines.length;\n        }\n\t} else if(mode == \"newline\") {\n\t\t// we need to manually add a linebreak for lines not starting with list markup\n\t\toperation.replacement = \"\\n\";\n\t\toperation.cutStart = operation.selStart;\n\t\toperation.cutEnd = operation.selEnd;\n\t\toperation.newSelStart = operation.selStart + 1;\n\t\toperation.newSelEnd = operation.newSelStart;\n\t}\n};\n\n})();","created":"20200803160356743","type":"application/javascript","tags":"","modified":"20210724192011820","module-type":"texteditoroperation"},"$:/plugins/jasonmhoule/editor-autolist-markdown/history":{"title":"$:/plugins/jasonmhoule/editor-autolist-markdown/history","created":"20210715131713629","modified":"20210724192417443","tags":"","type":"text/vnd.tiddlywiki","text":"* ''0.0.3'' -- fix non-list newline bug.\n* ''0.0.2'' -- smoothed out expected newline operations.\n* ''0.0.1'' -- initial release."},"$:/plugins/jasonmhoule/editor-autolist-markdown/license":{"title":"$:/plugins/jasonmhoule/editor-autolist-markdown/license","created":"20210715131713631","modified":"20210715131919122","tags":"","type":"text/vnd.tiddlywiki","text":"MIT License\n\nCopyright (c) 2021 Jason M. Houle\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."},"$:/plugins/jasonmhoule/editor-autolist-markdown/readme":{"title":"$:/plugins/jasonmhoule/editor-autolist-markdown/readme","created":"20210715131713633","modified":"20210715145800394","tags":"","type":"text/vnd.tiddlywiki","text":"!! ''Simplify bullet list usage when editing Markdown text for your tiddlers''\n\n[[This plugin|$:/plugins/jasonmhoule/editor-autolist-markdown]] simplifies the creation and editing of these lists by handling bullet level and content intelligently, right in the text editor.\n\nBulleted lists in Markdown are created using the following syntax:\n\n```\n- First level\n  - Second level\n    - Third level\n  - Second level again\n```\n\n!! Keybindings\n\n* ''Tab / Shift-Tab:'' indent/un-indent a line. If you select multiple bullet lines, these are each indented/unindented (preserving any existing difference of levels), allowing you to reorganize whole list sections at once.\n* ''Alt-Shift-Up / Alt-Shift-Down:'' move the selected text (multiple lines if selected) up or down one line, preserving list levels.\n* ''Enter:'' from a list level, creates a new bullet at the same list level. Hitting Enter a second time (from the now empty list level) removes the empty list level and concludes the list.\n\n''Note:'' the plugin is currently configured to apply these rules only for tiddlers of type: `text/x-markdown` and so ''requires a separate plugin'' to actually render tiddlers written in Markdown. This plugin was written and tested using the [[Markdown plugin|https://tiddlywiki.com/plugins/tiddlywiki/markdown/]] authored by [[Jeremy Ruston|https://github.com/Jermolene/TiddlyWiki5/tree/master/plugins/tiddlywiki/markdown]].\n\nThis plugin is based on the [[Editor AutoLists|https://saqimtiaz.github.io/sq-tw/editor-autolists.html]] plugin by [[Saq Imtiaz|https://github.com/saqimtiaz]], adapted for Markdown and extended."},"$:/plugins/jasonmhoule/editor-autolist-markdown/styles":{"title":"$:/plugins/jasonmhoule/editor-autolist-markdown/styles","created":"20200803171440138","modified":"20210715134922371","tags":"$:/tags/Stylesheet","type":"text/vnd.tiddlywiki","text":".sq-text-editor-btn-hidden {\n\tdisplay: none;\n}"},"$:/config/ShortcutInfo/autolist-markdown-indent":{"title":"$:/config/ShortcutInfo/autolist-markdown-indent","created":"20200804124703604","modified":"20210715143746613","type":"text/vnd.tiddlywiki","text":"Indent a line in a list"},"$:/config/ShortcutInfo/autolist-markdown-newline":{"title":"$:/config/ShortcutInfo/autolist-markdown-newline","created":"20200804124436341","modified":"20210715143740312","type":"text/vnd.tiddlywiki","text":"Add a newline and list markup if in a list"},"$:/config/ShortcutInfo/autolist-markdown-pushgroupdown":{"title":"$:/config/ShortcutInfo/autolist-markdown-pushgroupdown","created":"20210713141154387","modified":"20210715143734728","tags":"","type":"text/vnd.tiddlywiki","text":"Push selected group of lines down one row"},"$:/config/ShortcutInfo/autolist-markdown-pushgroupup":{"title":"$:/config/ShortcutInfo/autolist-markdown-pushgroupup","created":"20210713140638329","modified":"20210715143729409","tags":"","type":"text/vnd.tiddlywiki","text":"Push selected group of lines up one row"},"$:/config/ShortcutInfo/autolist-markdown-unindent":{"title":"$:/config/ShortcutInfo/autolist-markdown-unindent","created":"20200804124811668","modified":"20210715143723319","type":"text/vnd.tiddlywiki","text":"Unindent a line in a list"},"$:/config/shortcuts/autolist-markdown-indent":{"title":"$:/config/shortcuts/autolist-markdown-indent","created":"20200804124746636","modified":"20210715143058238","type":"text/vnd.tiddlywiki","text":"Tab"},"$:/config/shortcuts/autolist-markdown-newline":{"title":"$:/config/shortcuts/autolist-markdown-newline","created":"20200804124551033","modified":"20210715143051833","type":"text/vnd.tiddlywiki","text":"Enter"},"$:/config/shortcuts/autolist-markdown-pushgroupdown":{"title":"$:/config/shortcuts/autolist-markdown-pushgroupdown","created":"20210713141146090","modified":"20210715143228216","tags":"","type":"text/vnd.tiddlywiki","text":"Shift+Alt+Down"},"$:/config/shortcuts/autolist-markdown-pushgroupup":{"title":"$:/config/shortcuts/autolist-markdown-pushgroupup","created":"20210713140653448","modified":"20210715143221945","tags":"","type":"text/vnd.tiddlywiki","text":"Shift+Alt+Up"},"$:/config/shortcuts/autolist-markdown-unindent":{"title":"$:/config/shortcuts/autolist-markdown-unindent","created":"20200804124833452","modified":"20210715143045721","type":"text/vnd.tiddlywiki","text":"shift-Tab"}}}